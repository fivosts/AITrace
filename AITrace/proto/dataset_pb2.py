# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/dataset.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='proto/dataset.proto',
  package='AITrace',
  syntax='proto2',
  serialized_options=_b('\n\013com.AITraceB\014DatasetProtoP\001Z\tAITracepb'),
  serialized_pb=_b('\n\x13proto/dataset.proto\x12\x07\x41ITrace\"y\n\x07\x44\x61taset\x12.\n\rhecht_dataset\x18\x01 \x01(\x0b\x32\x15.AITrace.HechtDatasetH\x00\x12\x33\n\x10\x61i_trace_dataset\x18\x02 \x01(\x0b\x32\x17.AITrace.AITraceDatasetH\x00\x42\t\n\x07\x64\x61taset\"V\n\x0cHechtDataset\x12\x19\n\x0flocal_directory\x18\x01 \x01(\tH\x00\x12\x1b\n\x11local_tar_archive\x18\x02 \x01(\tH\x00\x42\x0e\n\x0c\x63ontentfiles\"X\n\x0e\x41ITraceDataset\x12\x19\n\x0flocal_directory\x18\x01 \x01(\tH\x00\x12\x1b\n\x11local_tar_archive\x18\x02 \x01(\tH\x00\x42\x0e\n\x0c\x63ontentfiles\"h\n\ttokenizer\x12\x12\n\ntoken_type\x18\x01 \x02(\t\x12\x12\n\ntoken_list\x18\x02 \x01(\t\x12\x13\n\x0bmask_tokens\x18\x03 \x01(\x08\x12\x1e\n\x16wordpiece_tokenization\x18\x04 \x01(\x08\x42(\n\x0b\x63om.AITraceB\x0c\x44\x61tasetProtoP\x01Z\tAITracepb')
)




_DATASET = _descriptor.Descriptor(
  name='Dataset',
  full_name='AITrace.Dataset',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='hecht_dataset', full_name='AITrace.Dataset.hecht_dataset', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='ai_trace_dataset', full_name='AITrace.Dataset.ai_trace_dataset', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='dataset', full_name='AITrace.Dataset.dataset',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=32,
  serialized_end=153,
)


_HECHTDATASET = _descriptor.Descriptor(
  name='HechtDataset',
  full_name='AITrace.HechtDataset',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='local_directory', full_name='AITrace.HechtDataset.local_directory', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='local_tar_archive', full_name='AITrace.HechtDataset.local_tar_archive', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='contentfiles', full_name='AITrace.HechtDataset.contentfiles',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=155,
  serialized_end=241,
)


_AITRACEDATASET = _descriptor.Descriptor(
  name='AITraceDataset',
  full_name='AITrace.AITraceDataset',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='local_directory', full_name='AITrace.AITraceDataset.local_directory', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='local_tar_archive', full_name='AITrace.AITraceDataset.local_tar_archive', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='contentfiles', full_name='AITrace.AITraceDataset.contentfiles',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=243,
  serialized_end=331,
)


_TOKENIZER = _descriptor.Descriptor(
  name='tokenizer',
  full_name='AITrace.tokenizer',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='token_type', full_name='AITrace.tokenizer.token_type', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='token_list', full_name='AITrace.tokenizer.token_list', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='mask_tokens', full_name='AITrace.tokenizer.mask_tokens', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='wordpiece_tokenization', full_name='AITrace.tokenizer.wordpiece_tokenization', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=333,
  serialized_end=437,
)

_DATASET.fields_by_name['hecht_dataset'].message_type = _HECHTDATASET
_DATASET.fields_by_name['ai_trace_dataset'].message_type = _AITRACEDATASET
_DATASET.oneofs_by_name['dataset'].fields.append(
  _DATASET.fields_by_name['hecht_dataset'])
_DATASET.fields_by_name['hecht_dataset'].containing_oneof = _DATASET.oneofs_by_name['dataset']
_DATASET.oneofs_by_name['dataset'].fields.append(
  _DATASET.fields_by_name['ai_trace_dataset'])
_DATASET.fields_by_name['ai_trace_dataset'].containing_oneof = _DATASET.oneofs_by_name['dataset']
_HECHTDATASET.oneofs_by_name['contentfiles'].fields.append(
  _HECHTDATASET.fields_by_name['local_directory'])
_HECHTDATASET.fields_by_name['local_directory'].containing_oneof = _HECHTDATASET.oneofs_by_name['contentfiles']
_HECHTDATASET.oneofs_by_name['contentfiles'].fields.append(
  _HECHTDATASET.fields_by_name['local_tar_archive'])
_HECHTDATASET.fields_by_name['local_tar_archive'].containing_oneof = _HECHTDATASET.oneofs_by_name['contentfiles']
_AITRACEDATASET.oneofs_by_name['contentfiles'].fields.append(
  _AITRACEDATASET.fields_by_name['local_directory'])
_AITRACEDATASET.fields_by_name['local_directory'].containing_oneof = _AITRACEDATASET.oneofs_by_name['contentfiles']
_AITRACEDATASET.oneofs_by_name['contentfiles'].fields.append(
  _AITRACEDATASET.fields_by_name['local_tar_archive'])
_AITRACEDATASET.fields_by_name['local_tar_archive'].containing_oneof = _AITRACEDATASET.oneofs_by_name['contentfiles']
DESCRIPTOR.message_types_by_name['Dataset'] = _DATASET
DESCRIPTOR.message_types_by_name['HechtDataset'] = _HECHTDATASET
DESCRIPTOR.message_types_by_name['AITraceDataset'] = _AITRACEDATASET
DESCRIPTOR.message_types_by_name['tokenizer'] = _TOKENIZER
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Dataset = _reflection.GeneratedProtocolMessageType('Dataset', (_message.Message,), dict(
  DESCRIPTOR = _DATASET,
  __module__ = 'proto.dataset_pb2'
  # @@protoc_insertion_point(class_scope:AITrace.Dataset)
  ))
_sym_db.RegisterMessage(Dataset)

HechtDataset = _reflection.GeneratedProtocolMessageType('HechtDataset', (_message.Message,), dict(
  DESCRIPTOR = _HECHTDATASET,
  __module__ = 'proto.dataset_pb2'
  # @@protoc_insertion_point(class_scope:AITrace.HechtDataset)
  ))
_sym_db.RegisterMessage(HechtDataset)

AITraceDataset = _reflection.GeneratedProtocolMessageType('AITraceDataset', (_message.Message,), dict(
  DESCRIPTOR = _AITRACEDATASET,
  __module__ = 'proto.dataset_pb2'
  # @@protoc_insertion_point(class_scope:AITrace.AITraceDataset)
  ))
_sym_db.RegisterMessage(AITraceDataset)

tokenizer = _reflection.GeneratedProtocolMessageType('tokenizer', (_message.Message,), dict(
  DESCRIPTOR = _TOKENIZER,
  __module__ = 'proto.dataset_pb2'
  # @@protoc_insertion_point(class_scope:AITrace.tokenizer)
  ))
_sym_db.RegisterMessage(tokenizer)


DESCRIPTOR._options = None
# @@protoc_insertion_point(module_scope)
